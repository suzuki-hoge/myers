<?php

declare(strict_types=1);

namespace Myers;

use PHPUnit\Framework\TestCase;

class CheckTest extends TestCase
{
    /**
     * @test
     * @dataProvider apply_dp
     */
    public function apply(string $v, string $exp)
    {
        $this->assertSame($exp, Checker::apply($v));
    }

    function apply_dp(): array
    {
        return [
            '正三角形のパターン 1' => ['1 1 1', '正三角形'],
            '正三角形のパターン 2' => ['99 99 99', '正三角形'],
            '二等辺三角形のパターン 1' => ['3 3 5', '二等辺三角形'],
            '二等辺三角形のパターン 2' => ['3 5 3', '二等辺三角形'],
            '二等辺三角形のパターン 3' => ['5 3 3', '二等辺三角形'],
            '不等辺三角形のパターン 1' => ['3 4 5', '不等辺三角形'],
            '不成立のパターン 1' => ['1 1 3', '不成立'],
            '不成立のパターン 2' => ['1 3 1', '不成立'],
            '不成立のパターン 3' => ['3 1 1', '不成立'],
            '不成立のパターン 4' => ['1 1 2', '不成立'],
            '不成立のパターン 5' => ['1 2 1', '不成立'],
            '不成立のパターン 6' => ['2 1 1', '不成立'],
            '数値以外のパターン 1' => ['1 1 a', '正の整数以外が含まれています'],
            '数値以外のパターン 2' => ['1 1 3e4', '正の整数以外が含まれています'],
            '数値以外のパターン 3' => ['1 1 4.2', '正の整数以外が含まれています'],
            '数値以外のパターン 4' => ['1 1 -1', '正の整数以外が含まれています'],
            '0 を含むパターン 1' => ['1 1 0', '0 が含まれています'],
            '0 を含むパターン 2' => ['0 0 0', '0 が含まれています'],
            '99 より大きい数を含むパターン 1' => ['1 1 100', '99 より大きい数が含まれています'],
            '整数が 3 つではないパターン 1' => ['1 1', '整数が 3 つではありません'],
            '整数が 3 つではないパターン 2' => ['1 1 1 1', '整数が 3 つではありません'],
            '空文字のパターン 1' => ['', '入力がありません'],
            '空文字のパターン 2' => [' ', '入力がありません'],
        ];
    }
}
